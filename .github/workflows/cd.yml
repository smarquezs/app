name: CD
on:
  push:
    branches:
      - feat/merge-cd-prod-staging-v2
  workflow_dispatch:
    inputs:
      pull_number:
        description: Pull Request ID
        required: true
      environment:
        description: Environment
        default: staging
        required: true
      environment_variables:
        description: Additional Environment Variables
        required: false
env:
  DOCKER_BUILDKIT: "1"
  KUBECONFIG: ./kubeconfig.yaml
  NODE_VERSION: "8.11.0"
  PULL_NUMBER: ${{ github.event.inputs.pull_number }}
  SLACK_CHANNEL: github-actions
  SLACK_USERNAME: github-actions
  SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

jobs:
  CD:
    runs-on: ubuntu-latest
    steps:
      - name: Set environment variables
        run: |
          echo "SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-8)" >> $GITHUB_ENV
          echo "APP_NAME=$(echo ${{ github.repository}} | awk -F / '{print $2}')" >> $GITHUB_ENV
          echo "RAILS_ENV_LINE=$(echo ${{ github.event.inputs.environment_variables }} | sed -E 's/([a-zA-Z_=]+)/--set-string rails_env.\1/g')" >> $GITHUB_ENV
          echo "APP_ENV=$(if [ $GITHUB_EVENT_NAME != "push" ]; then echo ${{ github.event.inputs.environment }}; else echo "production"; fi)" >> $GITHUB_ENV
      - name: Slack Notification started
        uses: rtCamp/action-slack-notify@master
        env:
          SLACK_MESSAGE: A deploy to ${{ env.APP_ENV }} started
          SLACK_TITLE: Started notify.
      - name: Set release name
        run: echo "RELEASE_NAME=$(if [ $GITHUB_EVENT_NAME != "push" ]; then echo $APP_NAME-pr-$PULL_NUMBER; else echo $APP_NAME; fi)" >> $GITHUB_ENV
      - name: Set service type
        run: echo "CLUSTER_IP=$(if [ $APP_ENV = "production" ]; then echo "--set service.type=ClusterIP"; fi)" >> $GITHUB_ENV
      - name: Get PR data
        if: github.event_name != 'push'
        uses: octokit/request-action@v2.x
        id: get_pull_request
        with:
          route: GET /repos/${{ github.repository }}/pulls/${{ env.PULL_NUMBER }}
        env:
          GITHUB_TOKEN: ${{ secrets.REGISTRY_TOKEN }}
      - name: Print pull request state
        if: github.event_name != 'push'
        run: echo ${{ fromJson(steps.get_pull_request.outputs.data).state }}
      - name: Check Pull Request state
        run: exit 1
        if: github.event_name != 'push' && fromJson(steps.get_pull_request.outputs.data).state != 'open'
      - name: Set branch name
        run: |
          echo "BRANCH_NAME=$(if [ $GITHUB_EVENT_NAME = "push" ]; then echo ${GITHUB_REF#refs/heads/}; else echo ${{ fromJson(steps.get_pull_request.outputs.data || '{}').head.ref }}; fi)" >> $GITHUB_ENV
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ env.BRANCH_NAME }}
          fetch-depth: 0
      - name: Setup git config
        run: |
          git config --global user.email "<>"
          git config --global user.name "The OPS Team"
      - name: Merge base branch
        if: github.event_name != 'push'
        run: |
          git merge origin/${{ fromJson(steps.get_pull_request.outputs.data).base.ref }}
      - name: Print Environment Variables
        run: |
          echo $SHORT_SHA
          echo $APP_NAME
          echo $RAILS_ENV_LINE
          echo $BRANCH_NAME
          echo $RELEASE_NAME
          echo $CLUSTER_IP
      - name: Slack Notification Success
        uses: rtCamp/action-slack-notify@master
        env:
          SLACK_MESSAGE: The deploy to ${{ env.APP_ENV }} has been run successfully.
          SLACK_TITLE: Success notify.
      - name: Slack Notification Failure
        if: {{ failure() }}
        uses: rtCamp/action-slack-notify@master
        env:
          SLACK_MESSAGE: The deploy to ${{ env.APP_ENV }} has failed
          SLACK_TITLE: Fail notify.